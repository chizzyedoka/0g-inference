"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/inference-client.tsx":
/*!*********************************************!*\
  !*** ./src/components/inference-client.tsx ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InferenceClient: function() { return /* binding */ InferenceClient; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/wagmi/dist/esm/hooks/useAccount.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! wagmi */ \"(app-pages-browser)/./node_modules/wagmi/dist/esm/hooks/useDisconnect.js\");\n/* harmony import */ var _web3modal_wagmi_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @web3modal/wagmi/react */ \"(app-pages-browser)/./node_modules/@web3modal/wagmi/dist/esm/exports/react/index.js\");\n/* harmony import */ var _0glabs_0g_serving_broker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @0glabs/0g-serving-broker */ \"(app-pages-browser)/./node_modules/@0glabs/0g-serving-broker/lib.esm/index.mjs\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var _barrel_optimize_names_Loader2_Send_Trash2_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=Loader2,Send,Trash2,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/wallet.js\");\n/* harmony import */ var _barrel_optimize_names_Loader2_Send_Trash2_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=Loader2,Send,Trash2,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/loader-circle.js\");\n/* harmony import */ var _barrel_optimize_names_Loader2_Send_Trash2_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=Loader2,Send,Trash2,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/send.js\");\n/* harmony import */ var _barrel_optimize_names_Loader2_Send_Trash2_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=Loader2,Send,Trash2,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/trash-2.js\");\n/* __next_internal_client_entry_do_not_use__ InferenceClient auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nfunction InferenceClient() {\n    var _currentService_provider, _currentService_provider1;\n    _s();\n    const { address, isConnected } = (0,wagmi__WEBPACK_IMPORTED_MODULE_4__.useAccount)();\n    const { disconnect } = (0,wagmi__WEBPACK_IMPORTED_MODULE_5__.useDisconnect)();\n    const { open } = (0,_web3modal_wagmi_react__WEBPACK_IMPORTED_MODULE_2__.useWeb3Modal)();\n    const [logs, setLogs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [response, setResponse] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [broker, setBroker] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [services, setServices] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentService, setCurrentService] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [userMessage, setUserMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [systemPrompt, setSystemPrompt] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"You are a helpful AI assistant.\");\n    const addLog = function(message) {\n        let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"info\";\n        const timestamp = new Date().toLocaleTimeString();\n        setLogs((prev)=>[\n                ...prev,\n                {\n                    timestamp,\n                    message,\n                    type\n                }\n            ]);\n        console.log(\"[\".concat(type.toUpperCase(), \"] \").concat(message));\n    };\n    const clearLogs = ()=>{\n        setLogs([]);\n        setResponse(\"\");\n    };\n    // Initialize broker when wallet connects\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initializeBroker = async ()=>{\n            if (!isConnected || !address || !window.ethereum) return;\n            try {\n                addLog(\"Initializing 0G Labs broker...\", \"info\");\n                // Create browser provider for wallet interaction - this is the key difference\n                const browserProvider = new ethers__WEBPACK_IMPORTED_MODULE_6__.BrowserProvider(window.ethereum);\n                // Check current network that MetaMask is connected to\n                const network = await browserProvider.getNetwork();\n                addLog(\"MetaMask network: \".concat(network.name, \" (Chain ID: \").concat(network.chainId, \")\"), \"info\");\n                // Ensure we're on the correct network (0G testnet)\n                if (network.chainId !== BigInt(16601)) {\n                    addLog(\"Warning: Not on 0G Newton Testnet (Chain ID: 16601)\", \"error\");\n                    addLog(\"Please switch to 0G Newton Testnet in MetaMask\", \"info\");\n                // Don't return, let's try anyway\n                }\n                // Create provider directly connected to 0G testnet for balance checking\n                const zgProvider = new ethers__WEBPACK_IMPORTED_MODULE_7__.JsonRpcProvider(\"https://evmrpc-testnet.0g.ai\");\n                // Get balance from the 0G network directly\n                const balance = await zgProvider.getBalance(address);\n                const balanceIn0G = Number(balance) / 1e18;\n                addLog(\"Wallet balance on 0G Network: \".concat(balanceIn0G.toFixed(6), \" 0G\"), balanceIn0G > 0 ? \"success\" : \"error\");\n                // Also check balance on current MetaMask network for comparison\n                const mmBalance = await browserProvider.getBalance(address);\n                const mmBalanceInEth = Number(mmBalance) / 1e18;\n                addLog(\"MetaMask network balance: \".concat(mmBalanceInEth.toFixed(6), \" (current network)\"), \"info\");\n                if (balanceIn0G === 0) {\n                    addLog(\"Your wallet has no 0G tokens on 0G Network.\", \"error\");\n                    addLog(\"Please ensure you have 0G tokens and MetaMask is on 0G Newton Testnet.\", \"info\");\n                    return;\n                }\n                // CRITICAL: Use browserProvider directly for the signer instead of switching\n                // This ensures the signer is connected to the same network as MetaMask\n                const signer = await browserProvider.getSigner();\n                addLog(\"Signer address: \".concat(await signer.getAddress()), \"info\");\n                addLog(\"Signer provider chain ID: \".concat((await signer.provider.getNetwork()).chainId), \"info\");\n                const newBroker = await (0,_0glabs_0g_serving_broker__WEBPACK_IMPORTED_MODULE_3__.createZGComputeNetworkBroker)(signer);\n                setBroker(newBroker);\n                addLog(\"Broker initialized successfully\", \"success\");\n                // Setup ledger\n                await setupLedger(newBroker);\n                addLog(\"Ledger setup completed\", \"success\");\n                // Discover services \n                await discoverServices(newBroker);\n            } catch (error) {\n                addLog(\"Failed to initialize broker: \".concat(error), \"error\");\n            }\n        };\n        initializeBroker();\n    }, [\n        isConnected,\n        address\n    ]);\n    const setupLedger = async (broker)=>{\n        try {\n            addLog(\"Setting up ledger account...\", \"info\");\n            try {\n                // Try to get existing account balance \n                const ledger = await broker.ledger //.getLedger()\n                ;\n                addLog(\"Account with ledger exists.\", \"info\");\n                // Check balance \n                //const account = await broker.ledger.getLedger()\n                addLog(\"Fetched existing ledger account\", \"success\");\n            //addLog(`Ledger details: ${JSON.stringify(account)}`, 'info')\n            //addLog(`Account exists. Balance: ${balance.toFixed(6)} OG, Available: ${available.toFixed(6)} OG`, 'success')\n            // Add more funds if available balance is low (less than 0.05)\n            // if (available < 0.05) {\n            //   const amountToSend = \"0.1\" // Use string as per docs\n            //   addLog(`Adding funds to existing account: ${amountToSend} OG`, 'info')\n            //   try {\n            //     const depositRes = await broker.ledger.depositFund(amountToSend)\n            //     addLog('Funds added successfully', 'success')\n            //     console.log('✅ Deposit result:', depositRes)\n            //   } catch (depositError) {\n            //     addLog(`Deposit failed: ${depositError}`, 'error')\n            //     console.error('Deposit error details:', depositError)\n            //     throw depositError\n            //   }\n            // }\n            } catch (error) {\n                // Account doesn't exist, so create a new one (using official API)\n                addLog(\"Account doesn't exist, creating new account...\", \"info\");\n                try {\n                    const amountToSend = 0.1;\n                    console.log(\"Attempting to create ledger with amount:\", amountToSend);\n                    const addRes = await broker.ledger.addLedger(amountToSend);\n                    addLog(\"Account created successfully\", \"success\");\n                    addLog(\"Account creation result: \".concat(JSON.stringify(addRes)), \"info\");\n                } catch (error) {\n                    const createError = error;\n                    addLog(\"Error creating account: \".concat(createError), \"error\");\n                    console.error(\"Account creation error details:\", createError);\n                    // Check if it's a gas estimation error\n                    if (createError.toString().includes(\"gas\") || createError.toString().includes(\"insufficient\")) {\n                        addLog(\"\\uD83D\\uDCA1 This might be a gas estimation issue. Try with a smaller amount.\", \"info\");\n                        try {\n                            addLog(\"Trying with smaller amount: 0.01 OG\", \"info\");\n                            const smallerAmount = 0.01;\n                            const retryRes = await broker.ledger.addLedger(smallerAmount);\n                            addLog(\"Account created with smaller amount\", \"success\");\n                            console.log(\"✅ Retry result:\", retryRes);\n                            return;\n                        } catch (retryError) {\n                            addLog(\"Retry also failed: \".concat(retryError), \"error\");\n                        }\n                    }\n                    throw createError;\n                }\n            }\n        } catch (error) {\n            addLog(\"Ledger setup failed: \".concat(error), \"error\");\n            console.error(\"Full ledger setup error:\", error);\n        // Don't throw error, let the app continue to service discovery\n        }\n    };\n    const discoverServices = async (broker)=>{\n        try {\n            addLog(\"Discovering AI services...\", \"info\");\n            const availableServices = await broker.inference.listService();\n            setServices(availableServices);\n            addLog(\"Found \".concat(availableServices.length, \" available services\"), \"success\");\n            if (availableServices.length > 0) {\n                const serviceArray = availableServices[0];\n                // Debug the original service structure (handle BigInt serialization)\n                addLog(\"Original service structure: \".concat(JSON.stringify(serviceArray, (key, value)=>typeof value === \"bigint\" ? value.toString() : value, 2)), \"info\");\n                // Convert array to object structure\n                const service = {\n                    provider: serviceArray[0],\n                    serviceType: serviceArray[1],\n                    url: serviceArray[2],\n                    fee1: serviceArray[3],\n                    fee2: serviceArray[4],\n                    timestamp: serviceArray[5],\n                    model: serviceArray[6],\n                    verifiability: serviceArray[7],\n                    signature: serviceArray[8]\n                };\n                setCurrentService(service);\n                addLog(\"Selected service provider: \".concat(service.provider), \"info\");\n                addLog(\"Service URL: \".concat(service.url), \"info\");\n                addLog(\"Model: \".concat(service.model), \"info\");\n                addLog(\"Verifiability: \".concat(service.verifiability || \"None\"), \"info\");\n                // Acknowledge provider (required before use)\n                addLog(\"Acknowledging provider...\", \"info\");\n                await broker.inference.acknowledgeProviderSigner(service.provider);\n                addLog(\"Provider acknowledged successfully\", \"success\");\n                // Get service details (endpoint URL and AI model name)\n                try {\n                    const { endpoint, model } = await broker.inference.getServiceMetadata(service.provider);\n                    addLog(\"Service endpoint: \".concat(endpoint), \"info\");\n                    addLog(\"Model from metadata: \".concat(model), \"info\");\n                    // Update service with metadata\n                    setCurrentService({\n                        ...service,\n                        endpoint,\n                        model\n                    });\n                } catch (metaError) {\n                    addLog(\"Using basic service info (metadata unavailable)\", \"info\");\n                    // Use service.url as fallback endpoint\n                    setCurrentService({\n                        ...service,\n                        endpoint: service.url,\n                        model: service.model\n                    });\n                }\n            } else {\n                addLog(\"No services available. Please check network connection.\", \"error\");\n            }\n        } catch (error) {\n            addLog(\"Service discovery failed: \".concat(error), \"error\");\n            addLog(\"This might be due to network issues or service unavailability\", \"info\");\n        }\n    };\n    // Modified runInference to use user input\n    const runInference = async ()=>{\n        if (!broker || !currentService || !currentService.endpoint) {\n            addLog(\"Broker or service not ready\", \"error\");\n            return;\n        }\n        if (!userMessage.trim()) {\n            addLog(\"Please enter a message before running inference\", \"error\");\n            return;\n        }\n        setIsLoading(true);\n        setResponse(\"\");\n        try {\n            var _currentService_provider_toString, _currentService_provider;\n            const question = userMessage.trim();\n            addLog(\"Preparing inference request...\", \"info\");\n            addLog(\"User message: \".concat(question), \"info\");\n            // Build the conversation messages\n            const messages = [];\n            // Add system instructions\n            if (systemPrompt.trim()) {\n                messages.push({\n                    role: \"system\",\n                    content: systemPrompt.trim()\n                });\n            }\n            // Add the user's message\n            messages.push({\n                role: \"user\",\n                content: question\n            });\n            addLog(\"current service is \".concat(currentService), \"info\");\n            addLog(\"Getting endpoint and model...\", \"info\");\n            const endpoint = currentService.endpoint;\n            const model = currentService.model;\n            addLog(\"Using endpoint: \".concat(endpoint), \"info\");\n            addLog(\"Using model: \".concat(model), \"info\");\n            // Enhanced debugging\n            addLog(\"Provider type: \".concat(typeof (currentService === null || currentService === void 0 ? void 0 : currentService.provider)), \"info\");\n            addLog(\"Provider exists: \".concat(!!(currentService === null || currentService === void 0 ? void 0 : currentService.provider)), \"info\");\n            addLog(\"Provider value: \".concat(currentService === null || currentService === void 0 ? void 0 : currentService.provider), \"info\");\n            addLog(\"Endpoint: \".concat(currentService === null || currentService === void 0 ? void 0 : currentService.endpoint), \"info\");\n            // Add safety check for provider\n            if (!currentService.provider) {\n                addLog(\"Error: Service provider is undefined\", \"error\");\n                return;\n            }\n            // Generate auth headers \n            const providerAddress = ((_currentService_provider = currentService.provider) === null || _currentService_provider === void 0 ? void 0 : (_currentService_provider_toString = _currentService_provider.toString) === null || _currentService_provider_toString === void 0 ? void 0 : _currentService_provider_toString.call(_currentService_provider)) || currentService.provider;\n            if (!providerAddress) {\n                addLog(\"Error: Could not get provider address\", \"error\");\n                return;\n            }\n            addLog(\"Using provider address: \".concat(providerAddress), \"info\");\n            const headers = await broker.inference.getRequestHeaders(providerAddress, question);\n            addLog(\"Got authentication headers\", \"success\");\n            addLog(\"Raw headers: \".concat(JSON.stringify(headers)), \"info\");\n            addLog(\"Making inference request...\", \"info\");\n            // Ensure model is defined\n            if (!model) {\n                throw new Error(\"Model is required for inference request\");\n            }\n            // Use direct fetch to match exactly what Node.js does\n            const requestBody = {\n                messages: messages,\n                model: model\n            };\n            addLog(\"Request body: \".concat(JSON.stringify(requestBody)), \"info\");\n            // Make direct fetch request with exact headers\n            const response = await fetch(\"\".concat(endpoint, \"/chat/completions\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...headers\n                },\n                body: JSON.stringify(requestBody)\n            });\n            if (!response.ok) {\n                console.log(\"Error: \".concat(response.status));\n                console.log(\"Response details:\", response);\n                const errorText = await response.text();\n                throw new Error(\"\".concat(response.status, ' \"').concat(errorText, '\"'));\n            }\n            const completion = await response.json();\n            console.log(\"OpenAI Response:\", completion);\n            // Extract answer\n            const aiResponse = completion.choices[0].message.content;\n            setResponse(aiResponse);\n            addLog(\"Inference completed successfully!\", \"success\");\n            // Show usage info if available\n            if (completion.usage) {\n                addLog(\"Tokens used: \".concat(completion.usage.total_tokens), \"info\");\n            }\n            // Show final balances using official API\n            try {\n                const finalLedger = await broker.ledger.getLedger();\n                const balance = Number(ethers__WEBPACK_IMPORTED_MODULE_8__.formatEther(finalLedger.balance || finalLedger.totalBalance || finalLedger));\n                const locked = finalLedger.locked ? Number(ethers__WEBPACK_IMPORTED_MODULE_8__.formatEther(finalLedger.locked)) : 0;\n                const available = balance - locked;\n                addLog(\"Updated balance: \".concat(balance.toFixed(6), \" OG, Available: \").concat(available.toFixed(6), \" OG\"), \"info\");\n            } catch (balanceError) {\n                addLog(\"Could not get updated balance\", \"info\");\n            }\n        } catch (error) {\n            addLog(\"Inference failed: \".concat(error), \"error\");\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if (!isLoading && userMessage.trim()) {\n            runInference();\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"space-y-6\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-4 rounded-lg border\",\n                children: !isConnected ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: ()=>open(),\n                    className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded flex items-center gap-2\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Loader2_Send_Trash2_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                            className: \"w-4 h-4\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                            lineNumber: 389,\n                            columnNumber: 13\n                        }, this),\n                        \"Connect Wallet\"\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                    lineNumber: 385,\n                    columnNumber: 11\n                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded flex items-center justify-between\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Connected:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                    lineNumber: 395,\n                                    columnNumber: 15\n                                }, this),\n                                \" \",\n                                address,\n                                currentService && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-sm mt-1\",\n                                    children: [\n                                        \"Service: \",\n                                        (_currentService_provider = currentService.provider) === null || _currentService_provider === void 0 ? void 0 : _currentService_provider.slice(0, 10),\n                                        \"...\",\n                                        (_currentService_provider1 = currentService.provider) === null || _currentService_provider1 === void 0 ? void 0 : _currentService_provider1.slice(-8)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                    lineNumber: 397,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                            lineNumber: 394,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>disconnect(),\n                            className: \"bg-red-500 hover:bg-red-700 text-white px-3 py-1 rounded text-sm\",\n                            children: \"Disconnect\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                            lineNumber: 402,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                    lineNumber: 393,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                lineNumber: 383,\n                columnNumber: 7\n            }, this),\n            isConnected && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"space-y-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                htmlFor: \"systemPrompt\",\n                                className: \"block text-sm font-medium text-gray-700 mb-2\",\n                                children: \"System Prompt (Optional):\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                lineNumber: 417,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n                                id: \"systemPrompt\",\n                                value: systemPrompt,\n                                onChange: (e)=>setSystemPrompt(e.target.value),\n                                placeholder: \"Enter system instructions for the AI...\",\n                                className: \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n                                rows: 2\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                lineNumber: 420,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                        lineNumber: 416,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"form\", {\n                        onSubmit: handleSubmit,\n                        className: \"space-y-4\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        htmlFor: \"userMessage\",\n                                        className: \"block text-sm font-medium text-gray-700 mb-2\",\n                                        children: \"Your Message:\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                        lineNumber: 433,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex gap-2\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n                                            id: \"userMessage\",\n                                            value: userMessage,\n                                            onChange: (e)=>setUserMessage(e.target.value),\n                                            placeholder: \"Type your message here...\",\n                                            className: \"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n                                            rows: 3,\n                                            disabled: isLoading\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                            lineNumber: 437,\n                                            columnNumber: 17\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                        lineNumber: 436,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                lineNumber: 432,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex gap-4\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        type: \"submit\",\n                                        disabled: isLoading || !currentService || !userMessage.trim(),\n                                        className: \"bg-green-500 hover:bg-green-700 disabled:bg-gray-400 text-white font-bold py-2 px-4 rounded flex items-center gap-2\",\n                                        children: [\n                                            isLoading ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Loader2_Send_Trash2_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                                                className: \"w-4 h-4 animate-spin\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                                lineNumber: 457,\n                                                columnNumber: 19\n                                            }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Loader2_Send_Trash2_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                                                className: \"w-4 h-4\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                                lineNumber: 459,\n                                                columnNumber: 19\n                                            }, this),\n                                            isLoading ? \"Running...\" : \"Send Message\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                        lineNumber: 451,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        type: \"button\",\n                                        onClick: clearLogs,\n                                        className: \"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded flex items-center gap-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Loader2_Send_Trash2_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                                className: \"w-4 h-4\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                                lineNumber: 468,\n                                                columnNumber: 17\n                                            }, this),\n                                            \"Clear Logs\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                        lineNumber: 463,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                lineNumber: 450,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                        lineNumber: 431,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                lineNumber: 414,\n                columnNumber: 9\n            }, this),\n            response && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"text-lg font-semibold mb-2\",\n                        children: \"AI Response:\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                        lineNumber: 479,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"bg-blue-50 border border-blue-200 text-blue-800 px-4 py-3 rounded whitespace-pre-wrap\",\n                        children: response\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                        lineNumber: 480,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                lineNumber: 478,\n                columnNumber: 9\n            }, this),\n            logs.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"text-lg font-semibold mb-2\",\n                        children: \"Logs:\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                        lineNumber: 489,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"bg-gray-50 border border-gray-300 rounded p-4 h-64 overflow-y-auto font-mono text-sm\",\n                        children: logs.map((log, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"mb-1 \".concat(log.type === \"error\" ? \"text-red-600\" : log.type === \"success\" ? \"text-green-600\" : \"text-gray-700\"),\n                                children: [\n                                    log.timestamp,\n                                    \": \",\n                                    log.message\n                                ]\n                            }, index, true, {\n                                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                                lineNumber: 492,\n                                columnNumber: 15\n                            }, this))\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                        lineNumber: 490,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n                lineNumber: 488,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\HP\\\\Desktop\\\\projects\\\\ogLab\\\\src\\\\components\\\\inference-client.tsx\",\n        lineNumber: 381,\n        columnNumber: 5\n    }, this);\n}\n_s(InferenceClient, \"FQsAZaSYt3NCqLpuP7rBtCosJj4=\", false, function() {\n    return [\n        wagmi__WEBPACK_IMPORTED_MODULE_4__.useAccount,\n        wagmi__WEBPACK_IMPORTED_MODULE_5__.useDisconnect,\n        _web3modal_wagmi_react__WEBPACK_IMPORTED_MODULE_2__.useWeb3Modal\n    ];\n});\n_c = InferenceClient;\nvar _c;\n$RefreshReg$(_c, \"InferenceClient\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/inference-client.tsx\n"));

/***/ })

});